/*
$Id$
Copyright (C) 2008-2010, The Perl Foundation.

=head1 NAME

src/pmc/objectref_pmc.template - Template for the ObjectRef PMC

=head1 DESCRIPTION

Forwards all but some methods to the held PMC.

=head2 Methods

=cut

*/

#include "parrot/parrot.h"
static STRING *OBJECTREF_str;

pmclass ObjectRef dynpmc group perl6_group auto_attrs {
    ATTR PMC *value;

    void class_init() {
        OBJECTREF_str = CONST_STRING(interp, "$!OBJECTREF");
    }

    VTABLE void init() {
        PMC * const hll_ns    = Parrot_get_ctx_HLL_namespace(INTERP);
        STRING * const s_obj  = OBJECTREF_str;
        PMC * const objectpmc = Parrot_ns_find_namespace_global(INTERP, hll_ns, s_obj);
        STATICSELF.init_pmc(objectpmc);
    }

    VTABLE void init_pmc(PMC *value) {
        /* Need custom mark and destroy. */
        PObj_custom_mark_SET(SELF);

        /* Initialize with an undef PMC if no value. */
        if (PMC_IS_NULL(value))
            value = pmc_new(INTERP, enum_class_Undef);
        SET_ATTR_value(INTERP, SELF, value);
    }

    VTABLE void mark() {
        if (PMC_data(SELF)) {
            PMC *value;
            GET_ATTR_value(INTERP, SELF, value);
            if (value)
                Parrot_gc_mark_PMC_alive(INTERP, (PMC *)value);
        }
    }

    VTABLE PMC * get_pmc() {
        PMC * value;
        GET_ATTR_value(INTERP, SELF, value);
        return value;
    }

    VTABLE void set_pmc(PMC *value) {
        SET_ATTR_value(INTERP, SELF, value);
    }

    VTABLE INTVAL isa_pmc(PMC *lookup) {
        PMC * value;
        if (SUPER(lookup)) return 1;
        /* PMCProxy_does sends us a proxied ObjectRef with no value */
        if (!PMC_data(SELF)) return 0;
        GET_ATTR_value(INTERP, SELF, value);
        return VTABLE_isa_pmc(INTERP, value, lookup);
    }

    VTABLE INTVAL isa(STRING *classname) {
        PMC * value;
        if (SUPER(classname)) return 1;
        /* PMCProxy_does sends us a proxied ObjectRef with no value */
        if (!PMC_data(SELF)) return 0;
        GET_ATTR_value(INTERP, SELF, value);
        return VTABLE_isa(INTERP, value, classname);
    }

    VTABLE INTVAL does_pmc(PMC *role) {
        PMC * value;
        /* PMCProxy_does sends us a proxied ObjectRef with no value */
        if (!PMC_data(SELF)) return 0;
        GET_ATTR_value(INTERP, SELF, value);
        return VTABLE_does_pmc(INTERP, value, role);
    }

    VTABLE INTVAL does(STRING *role) {
        PMC * value;
        /* PMCProxy_does sends us a proxied ObjectRef with no value */
        if (!PMC_data(SELF)) return 0;
        GET_ATTR_value(INTERP, SELF, value);
        return VTABLE_does(INTERP, value, role);
    }

    VTABLE void morph(PMC *type) {
        /* XXX For now silently do nothing - so copy op on us works. */
    }

    VTABLE PMC * clone() {
        PMC * value;
        PMC * copy;
        GET_ATTR_value(INTERP, SELF, value);
        copy = pmc_new_init(INTERP, SELF->vtable->base_type, value);
        return copy;
    }

    /* We don't want any of these to be touched */
    /* VTABLE PMC * getprop() */
    /* VTABLE PMC * setprop() */
    /* VTABLE PMC * delprop() */
    /* VTABLE PMC * getprops() */
}
